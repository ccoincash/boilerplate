import "util.scrypt";

/**
* A contract demo for multiple outputs
*/
contract MultiOutput {
    public function buy(Sig buyerSig, bytes opreturnScript, bytes txPreimage) {
        // in satoshis
        int price = 10000;
        // buyer public key
        PubKey buyer = PubKey(b'0200112233445566778899aabbccddeeffffeeddccbbaa99887766554433221100');
        // seller address
        Ripemd160 sellerPKH = Ripemd160(b'0011223344556677889999887766554433221100');
        // admin address
        Ripemd160 adminPKH = Ripemd160(b'0011223344556677889999887766554433221100');

        // this ensures the preimage is for the current tx
        require(Tx.checkPreimage(txPreimage));

        // only specified buyer can purchase
        require(checkSig(buyerSig, buyer));

        // seller payment
        bytes sellerScript = Util.buildPublicKeyHashScript(sellerPKH);
		bytes sellerOutput = Util.buildOutput(sellerScript, price);

        // admin payment/commision: 10%
        bytes adminScript = Util.buildPublicKeyHashScript(adminPKH);
		bytes adminOutput = Util.buildOutput(adminScript, price / 10);

        // OPRETURN
        bytes opreturnOutput = Util.buildOutput(opreturnScript, 0);

        // other outputs like change ...

        bytes outputs = sellerOutput + adminOutput + opreturnOutput;
        require(hash256(outputs) == Util.hashOutputs(txPreimage));
    }
}